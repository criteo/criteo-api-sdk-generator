{
  "openapi": "3.0.1",
  "info": {
    "title": "Criteo API Specification",
    "description": "This is used to help Criteo clients use our API",
    "version": "preview"
  },
  "servers": [
    {
      "url": "https://api.criteo.com"
    }
  ],
  "paths": {
    "/oauth2/token": {
      "post": {
        "tags": [
          "OAuth"
        ],
        "description": "Creates a token when the supplied client credentials are valid",
        "operationId": "CreateToken",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "client_id": {
                    "description": "API Client-Id or Username",
                    "type": "string"
                  },
                  "client_secret": {
                    "description": "API Client secret or password",
                    "type": "string",
                    "format": "password"
                  },
                  "grant_type": {
                    "description": "Other grant types are not available",
                    "type": "string",
                    "default": "client_credentials"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/JwtModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JwtModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/JwtModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2Error"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2Error"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2Error"
                }
              }
            }
          }
        }
      }
    },
    "/2021-04/audiences": {
      "get": {
        "tags": [
          "Audience"
        ],
        "description": "Get a list of all the audiences for the user or for the given advertiser_id",
        "operationId": "getAudiences",
        "parameters": [
          {
            "name": "advertiser-id",
            "in": "query",
            "description": "The advertiser id to get all the audiences for.\nMandatory for internal users. For external users,\n           if you don't provide it, we will take into account the advertisers from your portfolio",
            "schema": {
              "type": "string",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list was retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAudiencesResponse"
                },
                "example": {
                  "data": [
                    {
                      "type": "AudienceContactlist",
                      "id": "1",
                      "attributes": {
                        "advertiserId": "18",
                        "name": "Audience name",
                        "description": "Audience",
                        "created": "2018-12-10T10:00:50.0000000+00:00",
                        "updated": "2018-12-10T10:17:15.0000000+00:00",
                        "nbLines": 100,
                        "nbLinesEmail": 10,
                        "nbMatchesEmail": 10
                      }
                    }
                  ],
                  "errors": [],
                  "warnings": [
                    {
                      "traceId": "56ed4096-f96a-4944-8881-05468efe0ec9",
                      "type": "deprecation",
                      "code": "deprecated-field",
                      "instance": "/audiences/314195",
                      "title": "'nbValidIds' is deprecated",
                      "detail": "The field 'nbValidIds' is deprecated please use 'nbValidIdentifiers"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCodeResponse"
                },
                "example": {
                  "errors": [
                    {
                      "traceId": "56ed4096-f96a-4944-8881-05468efe0ec9",
                      "type": "validation",
                      "code": "audience-invalid",
                      "instance": "/audience/314159",
                      "title": "Audience is invalid",
                      "detail": "Audience is not found, please choose a valid audience"
                    }
                  ],
                  "warnings": [
                    {
                      "traceId": "56ed4096-f96a-4944-8881-05468efe0ec9",
                      "type": "deprecation",
                      "code": "deprecated-field",
                      "instance": "/audiences/314195",
                      "title": "'nbValidIds' is deprecated",
                      "detail": "The field 'nbValidIds' is deprecated please use 'nbValidIdentifiers"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Audience"
        ],
        "description": "Create an Audience for an Advertiser",
        "operationId": "createAudience",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAudienceRequest"
              }
            }
          },
          "required": true,
          "x-bodyName": "body"
        },
        "responses": {
          "200": {
            "description": "The audience was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewAudienceResponse"
                },
                "example": {
                  "data": {
                    "id": "1",
                    "type": "Audience"
                  },
                  "errors": [],
                  "warnings": [
                    {
                      "traceId": "56ed4096-f96a-4944-8881-05468efe0ec9",
                      "type": "deprecation",
                      "code": "deprecated-field",
                      "instance": "/audiences/314195",
                      "title": "'nbValidIds' is deprecated",
                      "detail": "The field 'nbValidIds' is deprecated please use 'nbValidIdentifiers"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCodeResponse"
                },
                "example": {
                  "errors": [
                    {
                      "traceId": "56ed4096-f96a-4944-8881-05468efe0ec9",
                      "type": "validation",
                      "code": "audience-invalid",
                      "instance": "/audience/314159",
                      "title": "Audience is invalid",
                      "detail": "Audience is not found, please choose a valid audience"
                    }
                  ],
                  "warnings": [
                    {
                      "traceId": "56ed4096-f96a-4944-8881-05468efe0ec9",
                      "type": "deprecation",
                      "code": "deprecated-field",
                      "instance": "/audiences/314195",
                      "title": "'nbValidIds' is deprecated",
                      "detail": "The field 'nbValidIds' is deprecated please use 'nbValidIdentifiers"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/2021-04/audiences/{audience-id}/contactlist": {
      "delete": {
        "tags": [
          "Audience"
        ],
        "description": "delete all identifiers from an Audience",
        "operationId": "deleteIdentifiers",
        "responses": {
          "200": {
            "description": "The contactlist was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAudienceContactListResponse"
                },
                "example": {
                  "data": {
                    "id": "1",
                    "type": "AudienceContactlist"
                  },
                  "errors": [],
                  "warnings": [
                    {
                      "traceId": "56ed4096-f96a-4944-8881-05468efe0ec9",
                      "type": "deprecation",
                      "code": "deprecated-field",
                      "instance": "/audiences/314195",
                      "title": "'nbValidIds' is deprecated",
                      "detail": "The field 'nbValidIds' is deprecated please use 'nbValidIdentifiers"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCodeResponse"
                },
                "example": {
                  "errors": [
                    {
                      "traceId": "56ed4096-f96a-4944-8881-05468efe0ec9",
                      "type": "validation",
                      "code": "audience-invalid",
                      "instance": "/audience/314159",
                      "title": "Audience is invalid",
                      "detail": "Audience is not found, please choose a valid audience"
                    }
                  ],
                  "warnings": [
                    {
                      "traceId": "56ed4096-f96a-4944-8881-05468efe0ec9",
                      "type": "deprecation",
                      "code": "deprecated-field",
                      "instance": "/audiences/314195",
                      "title": "'nbValidIds' is deprecated",
                      "detail": "The field 'nbValidIds' is deprecated please use 'nbValidIdentifiers"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Audience"
        ],
        "description": "Add/remove users to or from an audience",
        "operationId": "modifyAudienceUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactlistAmendmentRequest"
              }
            }
          },
          "required": true,
          "x-bodyName": "body"
        },
        "responses": {
          "200": {
            "description": "Summary of created request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifyAudienceResponse"
                },
                "example": {
                  "data": {
                    "type": "ContactlistAmendment",
                    "attributes": {
                      "contactListId": "12",
                      "operation": "add",
                      "requestDate": "2018-12-10T10:00:50.0000000+00:00",
                      "identifierType": "madid",
                      "nbValidIdentifiers": 7343,
                      "nbInvalidIdentifiers": 13,
                      "sampleInvalidIdentifiers": [
                        "InvalidIdentifier"
                      ]
                    }
                  },
                  "errors": [],
                  "warnings": [
                    {
                      "traceId": "56ed4096-f96a-4944-8881-05468efe0ec9",
                      "type": "deprecation",
                      "code": "deprecated-field",
                      "instance": "/audiences/314195",
                      "title": "'nbValidIds' is deprecated",
                      "detail": "The field 'nbValidIds' is deprecated please use 'nbValidIdentifiers"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCodeResponse"
                },
                "example": {
                  "errors": [
                    {
                      "traceId": "56ed4096-f96a-4944-8881-05468efe0ec9",
                      "type": "validation",
                      "code": "audience-invalid",
                      "instance": "/audience/314159",
                      "title": "Audience is invalid",
                      "detail": "Audience is not found, please choose a valid audience"
                    }
                  ],
                  "warnings": [
                    {
                      "traceId": "56ed4096-f96a-4944-8881-05468efe0ec9",
                      "type": "deprecation",
                      "code": "deprecated-field",
                      "instance": "/audiences/314195",
                      "title": "'nbValidIds' is deprecated",
                      "detail": "The field 'nbValidIds' is deprecated please use 'nbValidIdentifiers"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Audience 123 not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCodeResponse"
                },
                "example": {
                  "errors": [
                    {
                      "traceId": "56ed4096-f96a-4944-8881-05468efe0ec9",
                      "type": "validation",
                      "code": "audience-invalid",
                      "instance": "/audience/314159",
                      "title": "Audience is invalid",
                      "detail": "Audience is not found, please choose a valid audience"
                    }
                  ],
                  "warnings": [
                    {
                      "traceId": "56ed4096-f96a-4944-8881-05468efe0ec9",
                      "type": "deprecation",
                      "code": "deprecated-field",
                      "instance": "/audiences/314195",
                      "title": "'nbValidIds' is deprecated",
                      "detail": "The field 'nbValidIds' is deprecated please use 'nbValidIdentifiers"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "audience-id",
          "in": "path",
          "description": "The id of the audience to amend",
          "required": true,
          "schema": {
            "type": "string",
            "format": "int32"
          }
        }
      ]
    },
    "/2021-04/audiences/{audience-id}": {
      "delete": {
        "tags": [
          "Audience"
        ],
        "description": "Delete an audience by id",
        "operationId": "removeAudience",
        "responses": {
          "200": {
            "description": "The audience was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAudienceResponse"
                },
                "example": {
                  "data": {
                    "id": "1",
                    "type": "Audience"
                  },
                  "errors": [],
                  "warnings": [
                    {
                      "traceId": "56ed4096-f96a-4944-8881-05468efe0ec9",
                      "type": "deprecation",
                      "code": "deprecated-field",
                      "instance": "/audiences/314195",
                      "title": "'nbValidIds' is deprecated",
                      "detail": "The field 'nbValidIds' is deprecated please use 'nbValidIdentifiers"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCodeResponse"
                },
                "example": {
                  "errors": [
                    {
                      "traceId": "56ed4096-f96a-4944-8881-05468efe0ec9",
                      "type": "validation",
                      "code": "audience-invalid",
                      "instance": "/audience/314159",
                      "title": "Audience is invalid",
                      "detail": "Audience is not found, please choose a valid audience"
                    }
                  ],
                  "warnings": [
                    {
                      "traceId": "56ed4096-f96a-4944-8881-05468efe0ec9",
                      "type": "deprecation",
                      "code": "deprecated-field",
                      "instance": "/audiences/314195",
                      "title": "'nbValidIds' is deprecated",
                      "detail": "The field 'nbValidIds' is deprecated please use 'nbValidIdentifiers"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Audience"
        ],
        "description": "Update user audience specified by the audience id",
        "operationId": "modifyAudience",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplaceAudienceRequest"
              }
            }
          },
          "required": true,
          "x-bodyName": "body"
        },
        "responses": {
          "200": {
            "description": "The audience was updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplaceAudienceResponse"
                },
                "example": {
                  "data": {
                    "id": "1",
                    "type": "AudienceContactlist",
                    "attributes": {
                      "name": "example audience",
                      "description": "example audience description"
                    }
                  },
                  "errors": [],
                  "warnings": [
                    {
                      "traceId": "56ed4096-f96a-4944-8881-05468efe0ec9",
                      "type": "deprecation",
                      "code": "deprecated-field",
                      "instance": "/audiences/314195",
                      "title": "'nbValidIds' is deprecated",
                      "detail": "The field 'nbValidIds' is deprecated please use 'nbValidIdentifiers"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorCodeResponse"
                },
                "example": {
                  "errors": [
                    {
                      "traceId": "56ed4096-f96a-4944-8881-05468efe0ec9",
                      "type": "validation",
                      "code": "audience-invalid",
                      "instance": "/audience/314159",
                      "title": "Audience is invalid",
                      "detail": "Audience is not found, please choose a valid audience"
                    }
                  ],
                  "warnings": [
                    {
                      "traceId": "56ed4096-f96a-4944-8881-05468efe0ec9",
                      "type": "deprecation",
                      "code": "deprecated-field",
                      "instance": "/audiences/314195",
                      "title": "'nbValidIds' is deprecated",
                      "detail": "The field 'nbValidIds' is deprecated please use 'nbValidIdentifiers"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "audience-id",
          "in": "path",
          "description": "The id of the audience to amend",
          "required": true,
          "schema": {
            "type": "string",
            "format": "int32"
          }
        }
      ]
    },
    "/2021-04/marketing-solutions/ad-sets/{adSetId}": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "description": "Get the data for the specified ad set",
        "operationId": "GetAdSet",
        "parameters": [
          {
            "name": "adSetId",
            "in": "path",
            "description": "Id of the ad set",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "data for the ad set",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseReadAdSet"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseReadAdSet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseReadAdSet"
                }
              }
            }
          },
          "401": {
            "description": "The API client is not properly authenticated.",
            "content": {
              "text/plain": {},
              "application/json": {},
              "text/json": {}
            }
          },
          "403": {
            "description": "The API client is not authorized to access this resource or the resource does not exist.",
            "content": {
              "text/plain": {},
              "application/json": {},
              "text/json": {}
            }
          }
        }
      }
    },
    "/2021-04/marketing-solutions/ad-sets/search": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "description": "Search for ad sets",
        "operationId": "SearchAdSets",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RequestAdSetSearch"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestAdSetSearch"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestAdSetSearch"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RequestAdSetSearch"
              }
            }
          },
          "x-bodyName": "request"
        },
        "responses": {
          "200": {
            "description": "data for the ad sets",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponsesReadAdSet"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponsesReadAdSet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponsesReadAdSet"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {},
              "application/json": {},
              "text/json": {}
            }
          },
          "401": {
            "description": "The API client is not properly authenticated.",
            "content": {
              "text/plain": {},
              "application/json": {},
              "text/json": {}
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {},
              "application/json": {},
              "text/json": {}
            }
          }
        }
      }
    },
    "/2021-04/marketing-solutions/ad-sets": {
      "patch": {
        "tags": [
          "Campaign"
        ],
        "description": "Patch a list of AdSets.",
        "operationId": "PatchAdSets",
        "requestBody": {
          "description": "List of adsets to patch.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RequestsPatchAdSet"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestsPatchAdSet"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestsPatchAdSet"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RequestsPatchAdSet"
              }
            }
          },
          "x-bodyName": "adSets"
        },
        "responses": {
          "200": {
            "description": "List of patched adSets.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseAdSetId"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseAdSetId"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseAdSetId"
                }
              }
            }
          },
          "401": {
            "description": "The API client is not properly authenticated.",
            "content": {
              "text/plain": {},
              "application/json": {},
              "text/json": {}
            }
          },
          "403": {
            "description": "The API client is not authorized to access this resource or the resource does not exist.",
            "content": {
              "text/plain": {},
              "application/json": {},
              "text/json": {}
            }
          }
        }
      }
    },
    "/2021-04/marketing-solutions/ad-sets/start": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "description": "Start the specified list of ad sets",
        "operationId": "StartAdSets",
        "requestBody": {
          "description": "All the ad sets to start",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RequestsAdSetId"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestsAdSetId"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestsAdSetId"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RequestsAdSetId"
              }
            }
          },
          "x-bodyName": "adSets"
        },
        "responses": {
          "200": {
            "description": "List of ad sets that have been started and errors / warnings by ad set",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponsesAdSetId"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponsesAdSetId"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponsesAdSetId"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {},
              "application/json": {},
              "text/json": {}
            }
          },
          "401": {
            "description": "The API client is not properly authenticated.",
            "content": {
              "text/plain": {},
              "application/json": {},
              "text/json": {}
            }
          }
        }
      }
    },
    "/2021-04/marketing-solutions/ad-sets/stop": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "description": "Stop the specified list of ad sets",
        "operationId": "StopAdSets",
        "requestBody": {
          "description": "All the ad sets to stop",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RequestsAdSetId"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestsAdSetId"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestsAdSetId"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RequestsAdSetId"
              }
            }
          },
          "x-bodyName": "adSets"
        },
        "responses": {
          "200": {
            "description": "List of ad sets that have been stopped and errors / warnings by ad set",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResponsesAdSetId"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponsesAdSetId"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponsesAdSetId"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {},
              "application/json": {},
              "text/json": {}
            }
          },
          "401": {
            "description": "The API client is not properly authenticated.",
            "content": {
              "text/plain": {},
              "application/json": {},
              "text/json": {}
            }
          }
        }
      }
    },
    "/2021-04/statistics/report": {
      "post": {
        "tags": [
          "Analytics"
        ],
        "description": "This Statistics endpoint provides adset related data. It is an upgrade of our previous Statistics endpoint, and includes new metrics and customization capabilities.",
        "operationId": "GetAdsetReport",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/StatisticsReportQueryMessage"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatisticsReportQueryMessage"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StatisticsReportQueryMessage"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StatisticsReportQueryMessage"
              }
            }
          },
          "x-bodyName": "reportQuery"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                },
                "example": {
                  "errors": [
                    {
                      "traceId": "00000000-0000-0000-501e-e48007356e9f",
                      "type": "validation",
                      "code": "required-field",
                      "instance": "/report",
                      "title": "Start date and end date are required."
                    }
                  ]
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                },
                "example": {
                  "errors": [
                    {
                      "traceId": "00000000-0000-0000-501e-e48007356e9f",
                      "type": "access-control",
                      "code": "insufficient-advertiser-permission",
                      "instance": "/report",
                      "title": "Insufficient advertiser permission.",
                      "detail": "You do not have the rights to report on this advertiser."
                    }
                  ]
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/2021-04/transactions/report": {
      "post": {
        "tags": [
          "Analytics"
        ],
        "description": "This Transactions endpoint provides transactions id related data.",
        "operationId": "GetTransactionsReport",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionsReportQueryDataMessage"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionsReportQueryDataMessage"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionsReportQueryDataMessage"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionsReportQueryDataMessage"
              }
            }
          },
          "x-bodyName": "dataMessage"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                },
                "example": {
                  "errors": [
                    {
                      "traceId": "00000000-0000-0000-501e-e48007356e9f",
                      "type": "validation",
                      "code": "required-field",
                      "instance": "/report",
                      "title": "Start date and end date are required."
                    }
                  ]
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                },
                "example": {
                  "errors": [
                    {
                      "traceId": "00000000-0000-0000-501e-e48007356e9f",
                      "type": "access-control",
                      "code": "insufficient-advertiser-permission",
                      "instance": "/report",
                      "title": "Insufficient advertiser permission.",
                      "detail": "You do not have the rights to report on this advertiser."
                    }
                  ]
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/2021-04/advertisers/me": {
      "get": {
        "tags": [
          "Advertiser"
        ],
        "description": "Use this call to fetch a list of all advertisers in your account.",
        "operationId": "ApiPortfolioGet",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPortfolioResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPortfolioResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPortfolioResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPortfolioResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPortfolioResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPortfolioResponse"
                }
              }
            }
          }
        }
      }
    },
    "/legacy/marketing/v1/advertisers/{advertiserId}/categories": {
      "get": {
        "tags": [
          "Advertiser"
        ],
        "summary": "Gets all advertiser's categories",
        "description": "Get the list of all the categories linked to the requested advertiser.",
        "operationId": "Advertisers_GetCategories",
        "parameters": [
          {
            "name": "advertiserId",
            "in": "path",
            "description": "Mandatory. The id of the advertiser to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "enabledOnly",
            "in": "query",
            "description": "Optional. Returns only categories you can bid on. Defaults to false.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Categories returned OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryMessage"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryMessage"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryMessage"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryMessage"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryMessage"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed.",
            "content": {}
          },
          "403": {
            "description": "The requested advertiser is missing from current user’s portfolio.",
            "content": {}
          },
          "429": {
            "description": "Throttling failure. Maximum sending rate exceeded.",
            "content": {}
          },
          "500": {
            "description": "Unknown error.",
            "content": {}
          }
        }
      }
    },
    "/legacy/marketing/v1/advertisers/{advertiserId}/categories/{categoryHashCode}": {
      "get": {
        "tags": [
          "Advertiser"
        ],
        "summary": "Gets a specific advertiser's category",
        "description": "Get a specific category linked to the requested advertiser.",
        "operationId": "Advertisers_GetCategory",
        "parameters": [
          {
            "name": "advertiserId",
            "in": "path",
            "description": "Mandatory. The id of the advertiser to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "categoryHashCode",
            "in": "path",
            "description": "Mandatory. The id of the category to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category returned OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryMessage"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryMessage"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryMessage"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryMessage"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryMessage"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed.",
            "content": {}
          },
          "403": {
            "description": "The requested advertiser is missing from current user’s portfolio.",
            "content": {}
          },
          "404": {
            "description": "The requested category was not found for the advertiser.",
            "content": {}
          },
          "429": {
            "description": "Throttling failure. Maximum sending rate exceeded.",
            "content": {}
          },
          "500": {
            "description": "Unknown error.",
            "content": {}
          }
        }
      }
    },
    "/legacy/marketing/v1/campaigns/{campaignId}/categories": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Gets categories",
        "description": "Get the list of categories linked to the requested campaign.",
        "operationId": "Campaigns_GetCategories",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "Mandatory. The id of the campaign the categories are linked to.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "enabledOnly",
            "in": "query",
            "description": "Optional. Returns only categories you can bid on. Defaults to false.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Categories returned OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryMessage"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryMessage"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryMessage"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryMessage"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed.",
            "content": {}
          },
          "403": {
            "description": "One of the requested campaigns doesn't belong to the API user's portfolio which prevents from accessing its data.",
            "content": {}
          },
          "404": {
            "description": "The requested campaign was not found.",
            "content": {}
          },
          "429": {
            "description": "Throttling failure. Maximum sending rate exceeded.",
            "content": {}
          },
          "500": {
            "description": "Unknown error.",
            "content": {}
          }
        }
      }
    },
    "/legacy/marketing/v1/campaigns/{campaignId}/categories/{categoryHashCode}": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Gets a specific category",
        "description": "Get a specific category linked to the requested campaign.",
        "operationId": "Campaigns_GetCategory",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "Mandatory. The id of the campaign the categories are linked to.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "categoryHashCode",
            "in": "path",
            "description": "Mandatory. The id of the category to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category returned OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryMessage"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryMessage"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryMessage"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryMessage"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed.",
            "content": {}
          },
          "403": {
            "description": "One of the requested campaigns doesn't belong to the API user's portfolio which prevents from accessing its data.",
            "content": {}
          },
          "404": {
            "description": "The requested category was not found for the campaign.",
            "content": {}
          },
          "429": {
            "description": "Throttling failure. Maximum sending rate exceeded.",
            "content": {}
          },
          "500": {
            "description": "Unknown error.",
            "content": {}
          }
        }
      }
    },
    "/legacy/marketing/v1/campaigns/bids": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Gets a the bids for campaigns and their categories",
        "description": "Get the campaigns' bids, as well as the bids of their categories",
        "operationId": "Campaigns_GetBids",
        "parameters": [
          {
            "name": "campaignIds",
            "in": "query",
            "description": "Optional. The ids of the campaigns we want to get the bids on. If not specified, advertiserIds will be used.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "advertiserIds",
            "in": "query",
            "description": "Optional. The ids of the advertisers' campaigns we want to get the bids on. If campaignIds not specified, and neither is advertiserIds, all the advertisers in the user's portfolio are used.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryHashCodes",
            "in": "query",
            "description": "Optional. Filters only specified categories. By default no filtering is applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bidType",
            "in": "query",
            "description": "Optional. Filters by bid type. By default no filtering is applied.",
            "schema": {
              "type": "string",
              "enum": [
                "Unknown",
                "CPC",
                "COS",
                "CPO"
              ]
            }
          },
          {
            "name": "campaignStatus",
            "in": "query",
            "description": "Optional. Filters by campaign status. By default no filtering is applied.",
            "schema": {
              "type": "string",
              "enum": [
                "Running",
                "Archived",
                "NotRunning"
              ]
            }
          },
          {
            "name": "pendingChanges",
            "in": "query",
            "description": "Optional. Filters only pending changes or settled ones. By default no filtering is applied.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bids returned OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignBidMessage"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignBidMessage"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignBidMessage"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignBidMessage"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignBidMessage"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed.",
            "content": {}
          },
          "403": {
            "description": "There is not even one valid advertiserId or campaignId requested.",
            "content": {}
          },
          "429": {
            "description": "Throttling failure. Maximum sending rate exceeded.",
            "content": {}
          },
          "500": {
            "description": "Unknown error.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Campaign"
        ],
        "summary": "Update bids for campaigns and their categories",
        "description": "If a campaign bid is updated, all (if any) category bids for this campaign will be updated with the new value if they are initially equal to the campaign bid.\r\nIf the category bid is not wanted to be cascaded to the categories with the same bid value, new change bids must be added in the request for the categories where the value should be kept (with the initial value).",
        "operationId": "Campaigns_UpdateBids",
        "requestBody": {
          "description": "Specifies the list of bid changes to be applied.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CampaignBidChangeRequest"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CampaignBidChangeRequest"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CampaignBidChangeRequest"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CampaignBidChangeRequest"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CampaignBidChangeRequest"
                }
              }
            },
            "text/html": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CampaignBidChangeRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Campaign bids updated OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignMessage"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignMessage"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignMessage"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignMessage"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input. Please check returned message for details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignBidChangeResponseMessageWithDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignBidChangeResponseMessageWithDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignBidChangeResponseMessageWithDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignBidChangeResponseMessageWithDetails"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignBidChangeResponseMessageWithDetails"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed.",
            "content": {}
          },
          "429": {
            "description": "Throttling failure. Maximum sending rate exceeded.",
            "content": {}
          },
          "500": {
            "description": "Unknown error.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "bidChanges"
      }
    },
    "/legacy/marketing/v1/categories": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Gets categories",
        "description": "Get the list of categories with the specified filters.\r\nIf a category is requested but is missing from current user's portfolio, it will not be included in the list.\r\nIf neither campaign ids nor advertisers ids are provided, then the user's portfolio will be used.",
        "operationId": "Categories_GetCategories",
        "parameters": [
          {
            "name": "campaignIds",
            "in": "query",
            "description": "Optional. One or more campaign ids, E.g., 78, 12932, 45236. If the campaign ids requested are not liked to advertisers in the user's portfolio, they will be skipped.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "advertiserIds",
            "in": "query",
            "description": "Optional. One or more advertiser ids, E.g., 78, 12932, 45236. If the advertiser ids requested are not part of the user's portfolio, they will be skipped.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryHashCodes",
            "in": "query",
            "description": "Optional. One or more category hash codes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enabledOnly",
            "in": "query",
            "description": "Optional. Returns only categories you can bid on. Defaults to false.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Categories returned OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryMessage"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryMessage"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryMessage"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryMessage"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There is not even one valid advertiserId or campaignId requested.",
            "content": {}
          },
          "401": {
            "description": "Authentication failed.",
            "content": {}
          },
          "429": {
            "description": "Throttling failure. Maximum sending rate exceeded.",
            "content": {}
          },
          "500": {
            "description": "Unknown error.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Category"
        ],
        "summary": "Enables/disables categories",
        "description": "Update categories for multiple catalogs.<br />\r\nPlease note that all validations need to pass before applying the requested changes;\r\nthe subsequent validation error messages will be returned in the response.<br />\r\nPlease note that bidding will still happen for disabled categories, but using the Camapign's bid.\r\nIf the call is successful, full details about the changed categories will be returned.",
        "operationId": "Categories_UpdateCategories",
        "requestBody": {
          "description": "The list of categories to be enabled/disabled, grouped by catalog.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CategoryUpdatesPerCatalog"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CategoryUpdatesPerCatalog"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CategoryUpdatesPerCatalog"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CategoryUpdatesPerCatalog"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CategoryUpdatesPerCatalog"
                }
              }
            },
            "text/html": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CategoryUpdatesPerCatalog"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Categories updated OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryUpdatesPerCatalog"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryUpdatesPerCatalog"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryUpdatesPerCatalog"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryUpdatesPerCatalog"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryUpdatesPerCatalog"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input. Please check returned message for details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryUpdatesPerCatalogErrorMessageWithDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryUpdatesPerCatalogErrorMessageWithDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryUpdatesPerCatalogErrorMessageWithDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryUpdatesPerCatalogErrorMessageWithDetails"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryUpdatesPerCatalogErrorMessageWithDetails"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed.",
            "content": {}
          },
          "429": {
            "description": "Throttling failure. Maximum sending rate exceeded.",
            "content": {}
          },
          "500": {
            "description": "Unknown error.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "categoriesPerCatalog"
      }
    }
  },
  "components": {
    "schemas": {
      "JwtModel": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The access token issued by the authorization server."
          },
          "token_type": {
            "type": "string",
            "description": "The type of the token issued."
          },
          "expires_in": {
            "type": "integer",
            "description": "The lifetime in seconds of the access token.For\r\nexample, the value \"3600\" denotes that the access token will\r\nexpire in one hour from the time the response was generated.\r\nIf omitted, the authorization server SHOULD provide the\r\nexpiration time via other means or document the default value.",
            "format": "int32"
          }
        }
      },
      "OAuth2Error": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "error_description": {
            "type": "string"
          }
        },
        "description": "Represents an error response from an OAuth2 flow"
      },
      "GetAudiencesResponse": {
        "required": [
          "data",
          "errors",
          "warnings"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Audience"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudienceError"
            }
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudienceWarning"
            }
          }
        },
        "description": "Body of the GET audience operation"
      },
      "ErrorCodeResponse": {
        "required": [
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudienceError"
            }
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudienceWarning"
            }
          }
        },
        "description": "Definition of the error code"
      },
      "NewAudienceResponse": {
        "required": [
          "data",
          "errors",
          "warnings"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BasicAudienceDefinition"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudienceError"
            }
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudienceWarning"
            }
          }
        },
        "description": "Response of a newly created audience"
      },
      "DeleteAudienceContactListResponse": {
        "required": [
          "data",
          "errors",
          "warnings"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BasicAudienceDefinition"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudienceError"
            }
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudienceWarning"
            }
          }
        },
        "description": "Response of a contactlist deletion"
      },
      "ModifyAudienceResponse": {
        "required": [
          "data",
          "errors",
          "warnings"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ContactlistOperation"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudienceError"
            }
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudienceWarning"
            }
          }
        },
        "description": "Parameters to modify an audience"
      },
      "DeleteAudienceResponse": {
        "required": [
          "data",
          "errors",
          "warnings"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BasicAudienceDefinition"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudienceError"
            }
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudienceWarning"
            }
          }
        },
        "description": "Response of an audience deletion"
      },
      "ReplaceAudienceResponse": {
        "required": [
          "data",
          "errors",
          "warnings"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BasicAudienceDefinition"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudienceError"
            }
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudienceWarning"
            }
          }
        },
        "description": "Response of an audience replacement"
      },
      "NewAudienceRequest": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NewAudience"
          }
        },
        "description": "Body of creation of a new audience"
      },
      "ContactlistAmendmentRequest": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ContactlistAmendment"
          }
        },
        "description": "Request for a contactlist amendment"
      },
      "ReplaceAudienceRequest": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ReplaceAudience"
          }
        },
        "description": "Request to replace an audience"
      },
      "Audience": {
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "the name of the entity type",
            "example": "Audience"
          },
          "id": {
            "type": "string",
            "description": "id of the Audience",
            "example": "314159"
          },
          "attributes": {
            "required": [
              "created",
              "description",
              "name",
              "updated"
            ],
            "type": "object",
            "properties": {
              "advertiserId": {
                "type": "string",
                "description": "The advertiser id that owns this Audience",
                "format": "int32"
              },
              "name": {
                "type": "string",
                "description": "The name of the Audience"
              },
              "description": {
                "type": "string",
                "description": "The string description of the Audience"
              },
              "created": {
                "type": "string",
                "description": "Date and time ISO 8601 formatted string",
                "format": "date-time"
              },
              "updated": {
                "type": "string",
                "description": "Date and time ISO 8601 formatted string",
                "format": "date-time"
              },
              "nbLines": {
                "type": "integer",
                "description": "The number of line in the audience available once processed"
              },
              "nbLinesEmail": {
                "type": "integer",
                "description": "The number of email line in the audience available once processed"
              },
              "nbMatchesEmail": {
                "type": "integer",
                "description": "The number of email matches in the audience available once processed"
              }
            }
          }
        },
        "description": "Definition of an audience and all its information"
      },
      "AudienceError": {
        "required": [
          "code",
          "instance",
          "type"
        ],
        "type": "object",
        "properties": {
          "traceId": {
            "type": "string",
            "description": "(REQUIRED) The Correlation ID provided by the Gateway. It is also a unique identifier for this particular occurrence of the problem."
          },
          "type": {
            "enum": [
              "access-control",
              "authentication",
              "authorization",
              "availability",
              "deprecation",
              "quota",
              "validation"
            ],
            "type": "string",
            "description": "(REQUIRED) The classification of the error"
          },
          "code": {
            "type": "string",
            "description": "(REQUIRED) A machine-readable unique error code, expressed as a string value. The format used must be kebab-case."
          },
          "instance": {
            "type": "string",
            "description": "(REQUIRED) A URI reference that identifies the specific occurrence of the problem"
          },
          "title": {
            "type": "string",
            "description": "(RECOMMENDED) A short, human-readable summary of the problem type"
          },
          "detail": {
            "type": "string",
            "description": "(RECOMMENDED) A human-readable explanation specific to this occurrence of the problem"
          },
          "source": {
            "type": "object",
            "description": "(OPTIONAL) A machine-readable structure to reference to the exact location(s) causing the error(s)"
          },
          "stackTrace": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "(NEVER IN PRODUCTION) A human-readable stacktrace produced by the implementation technology"
          }
        },
        "description": "Definition of an audience error"
      },
      "AudienceWarning": {
        "required": [
          "code",
          "detail",
          "instance",
          "type"
        ],
        "type": "object",
        "properties": {
          "traceId": {
            "type": "string",
            "description": "(REQUIRED) The Correlation ID provided by the Gateway. It is also a unique identifier for this particular occurrence of the problem."
          },
          "type": {
            "enum": [
              "access-control",
              "authentication",
              "authorization",
              "availability",
              "deprecation",
              "quota",
              "validation"
            ],
            "type": "string",
            "description": "(REQUIRED) The classification of the error"
          },
          "code": {
            "type": "string",
            "description": "(REQUIRED) A machine-readable unique error code, expressed as a string value. The format used must be kebab-case."
          },
          "instance": {
            "type": "string",
            "description": "(REQUIRED) A URI reference that identifies the specific occurrence of the problem"
          },
          "title": {
            "type": "string",
            "description": "(RECOMMENDED) A short, human-readable summary of the problem type"
          },
          "detail": {
            "type": "string",
            "description": "(REQUIRED) A human-readable explanation specific to this occurrence of the problem"
          },
          "source": {
            "type": "object",
            "description": "(OPTIONAL) A machine-readable structure to reference to the exact location(s) causing the error(s)"
          },
          "stackTrace": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "(NEVER IN PRODUCTION) A human-readable stacktrace produced by the implementation technology"
          }
        },
        "description": "Definition of the warning"
      },
      "BasicAudienceDefinition": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "the id of the entity type"
          },
          "type": {
            "type": "string",
            "description": "the name of the entity type"
          },
          "attributes": {
            "$ref": "#/components/schemas/AudienceNameDescription"
          }
        },
        "description": "Common definition of an audience"
      },
      "ContactlistOperation": {
        "required": [
          "attributes",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "the name of the entity type"
          },
          "attributes": {
            "required": [
              "operation"
            ],
            "type": "object",
            "properties": {
              "contactListId": {
                "type": "string",
                "description": "the affected user list id",
                "format": "int32"
              },
              "operation": {
                "type": "string",
                "description": "The action recorded"
              },
              "requestDate": {
                "type": "string",
                "description": "When the action was recorded",
                "format": "date-time"
              },
              "identifierType": {
                "type": "string",
                "description": "The schema specified for of the identifiers"
              },
              "nbValidIdentifiers": {
                "type": "integer",
                "description": "How many identifiers were valid for the specified schema"
              },
              "nbInvalidIdentifiers": {
                "type": "integer",
                "description": "How many identifiers were invalid for the specified schema"
              },
              "sampleInvalidIdentifiers": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "A sample of invalid identifiers if there is some"
              }
            },
            "description": "the contactlist operation attributes"
          }
        },
        "description": "Response definition of a contactlist operation"
      },
      "NewAudience": {
        "required": [
          "attributes",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "the name of the entity type",
            "example": "Audience"
          },
          "attributes": {
            "required": [
              "name"
            ],
            "type": "object",
            "properties": {
              "advertiserId": {
                "type": "string",
                "description": "The advertiser id to create the audience for"
              },
              "name": {
                "type": "string",
                "description": "The name of the new audience"
              },
              "description": {
                "type": "string",
                "description": "The description of the audience"
              }
            }
          }
        },
        "description": "Body for the creation of a new audience (name, advertiserId, etc)"
      },
      "ContactlistAmendment": {
        "required": [
          "attributes",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "User List",
            "example": "ContactlistAmendment"
          },
          "attributes": {
            "required": [
              "identifiers",
              "operation"
            ],
            "type": "object",
            "properties": {
              "operation": {
                "enum": [
                  "add",
                  "remove"
                ],
                "type": "string",
                "description": "Operation to add or remove users"
              },
              "identifierType": {
                "enum": [
                  "email",
                  "madid",
                  "identityLink",
                  "gum"
                ],
                "type": "string",
                "description": "What type of identifiers are used"
              },
              "identifiers": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The users tos add or remove, each in the schema specified"
              },
              "gumCallerId": {
                "type": "integer",
                "description": "The Gum caller id of the advertiser patching identifiers of type Gum"
              },
              "internalIdentifiers": {
                "type": "boolean",
                "description": "The flag to indicate if identifiers are external or internal"
              }
            },
            "description": "the name of the entity type"
          }
        },
        "description": "Parameters for the amendment of a contactlist"
      },
      "ReplaceAudience": {
        "required": [
          "attributes",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "the name of the entity type",
            "example": "Audience"
          },
          "attributes": {
            "$ref": "#/components/schemas/AudienceNameDescription"
          }
        },
        "description": "Parameters required to replace an audience"
      },
      "AudienceNameDescription": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name to designate the audience by"
          },
          "description": {
            "type": "string",
            "description": "The description of the audience"
          }
        },
        "description": "Description of an audience with name and detailed description"
      },
      "ResponseReadAdSet": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ReadModelReadAdSet"
          },
          "warnings": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProblemDetails"
            },
            "readOnly": true
          },
          "errors": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProblemDetails"
            },
            "readOnly": true
          }
        },
        "description": "output resource"
      },
      "ResponsesReadAdSet": {
        "description": "List of output resources",
        "type": "object",
        "properties": {
          "data": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReadModelReadAdSet"
            },
            "readOnly": true
          },
          "warnings": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProblemDetails"
            },
            "readOnly": true
          },
          "errors": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProblemDetails"
            },
            "readOnly": true
          }
        }
      },
      "ResponseAdSetId": {
        "type": "object",
        "properties": {
          "data": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReadModelAdSetId"
            },
            "readOnly": true
          },
          "warnings": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProblemDetails"
            },
            "readOnly": true
          },
          "errors": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProblemDetails"
            },
            "readOnly": true
          }
        },
        "description": "output resource"
      },
      "ResponsesAdSetId": {
        "type": "object",
        "properties": {
          "data": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReadModelAdSetId"
            },
            "readOnly": true
          },
          "warnings": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProblemDetails"
            },
            "readOnly": true
          },
          "errors": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProblemDetails"
            },
            "readOnly": true
          }
        },
        "description": "List of output resources"
      },
      "RequestAdSetSearch": {
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/AdSetSearchFilter"
          }
        },
        "description": "request payload of the search endpoint"
      },
      "RequestsPatchAdSet": {
        "type": "object",
        "properties": {
          "data": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WriteModelPatchAdSet"
            }
          }
        },
        "description": "List of input resources"
      },
      "RequestsAdSetId": {
        "type": "object",
        "properties": {
          "data": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WriteModelAdSetId"
            }
          }
        },
        "description": "List of input resources"
      },
      "ReadModelReadAdSet": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the entity",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "example": "ReadAdSet"
          },
          "attributes": {
            "$ref": "#/components/schemas/ReadAdSet"
          }
        },
        "description": "read model data for resources"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "traceIdentifier": {
            "type": "string"
          },
          "type": {
            "enum": [
              "unknown",
              "access-control",
              "authentication",
              "authorization",
              "availability",
              "deprecation",
              "quota",
              "validation"
            ],
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "instance": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "source": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "stackTrace": {
            "type": "string"
          }
        },
        "description": "Data model for common error or warning"
      },
      "ReadModelAdSetId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the entity",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "example": "AdSetId"
          }
        },
        "description": "read model data for resources"
      },
      "AdSetSearchFilter": {
        "type": "object",
        "properties": {
          "adSetIds": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "advertiserIds": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "campaignIds": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "filter on ad set ids"
      },
      "WriteModelPatchAdSet": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the entity"
          },
          "type": {
            "type": "string",
            "description": "Canonical type name of the entity",
            "example": "PatchAdSet"
          },
          "attributes": {
            "$ref": "#/components/schemas/PatchAdSet"
          }
        },
        "description": "write model data for resources"
      },
      "WriteModelAdSetId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the entity"
          },
          "type": {
            "type": "string",
            "description": "Canonical type name of the entity",
            "example": "AdSetId"
          }
        },
        "description": "write model data for resources"
      },
      "ReadAdSet": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the ad set"
          },
          "advertiserId": {
            "type": "string",
            "description": "Advertiser id of the campaign this ad set belongs to"
          },
          "campaignId": {
            "type": "string",
            "description": "Campaign id this ad set belongs to"
          },
          "destinationEnvironment": {
            "enum": [
              "undefined",
              "web",
              "app"
            ],
            "type": "string",
            "description": "The environment that an ad click will lead a user to"
          },
          "schedule": {
            "$ref": "#/components/schemas/ReadAdSetSchedule"
          },
          "bidding": {
            "$ref": "#/components/schemas/ReadAdSetBidding"
          },
          "targeting": {
            "$ref": "#/components/schemas/AdSetTargeting"
          },
          "budget": {
            "$ref": "#/components/schemas/ReadAdSetBudget"
          }
        },
        "description": "ad set read model"
      },
      "PatchAdSet": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the ad set"
          },
          "scheduling": {
            "$ref": "#/components/schemas/PatchAdSetScheduling"
          },
          "bidding": {
            "$ref": "#/components/schemas/PatchAdSetBidding"
          },
          "targeting": {
            "$ref": "#/components/schemas/AdSetTargeting"
          },
          "budget": {
            "$ref": "#/components/schemas/PatchAdSetBudget"
          }
        },
        "description": "ad set patch model"
      },
      "ReadAdSetSchedule": {
        "type": "object",
        "properties": {
          "startDate": {
            "$ref": "#/components/schemas/NillableDateTime"
          },
          "endDate": {
            "$ref": "#/components/schemas/NillableDateTime"
          },
          "activationStatus": {
            "enum": [
              "on",
              "off"
            ],
            "type": "string",
            "description": "Activation status of the ad set, i.e. whether the consumer wants it to deliver"
          },
          "deliveryStatus": {
            "enum": [
              "draft",
              "inactive",
              "live",
              "notLive",
              "pausing",
              "paused",
              "scheduled",
              "ended",
              "notDelivering",
              "archived"
            ],
            "type": "string",
            "description": "Delivery status of the delivery of the ad set, i.e. whether the ad set is delivering"
          }
        },
        "description": "ad set schedule read model"
      },
      "ReadAdSetBidding": {
        "type": "object",
        "properties": {
          "bidAmount": {
            "$ref": "#/components/schemas/NillableDecimal"
          },
          "bidStrategy": {
            "enum": [
              "actions",
              "clicks",
              "conversions",
              "displays",
              "installs",
              "revenue",
              "storeConversions",
              "value",
              "viewedImpressions",
              "Visits",
              "completedVideoViews"
            ],
            "type": "string",
            "description": "The intended optimization for the Ad Set"
          },
          "costController": {
            "enum": [
              "COS",
              "CPC",
              "CPI",
              "CPM",
              "CPO",
              "CPSV",
              "CPV",
              "dailyBudget"
            ],
            "type": "string",
            "description": "How is spend controlled"
          }
        },
        "description": "ad set bidding read model"
      },
      "AdSetTargeting": {
        "type": "object",
        "properties": {
          "deliveryLimitations": {
            "$ref": "#/components/schemas/AdSetDeliveryLimitations"
          },
          "geoLocation": {
            "$ref": "#/components/schemas/AdSetGeoLocation"
          },
          "frequencyCapping": {
            "$ref": "#/components/schemas/AdSetFrequencyCapping"
          }
        },
        "description": "ad set targeting model"
      },
      "ReadAdSetBudget": {
        "type": "object",
        "properties": {
          "budgetStrategy": {
            "enum": [
              "capped",
              "uncapped"
            ],
            "type": "string",
            "description": "Whether your budget is capped or not"
          },
          "budgetRenewal": {
            "enum": [
              "undefined",
              "daily",
              "monthly",
              "lifetime"
            ],
            "type": "string",
            "description": "The pace of the budget renewal"
          },
          "budgetDeliverySmoothing": {
            "enum": [
              "accelerated",
              "standard"
            ],
            "type": "string",
            "description": "The pace at which the budget can be spent"
          },
          "budgetDeliveryWeek": {
            "enum": [
              "undefined",
              "mondayToSunday",
              "tuesdayToMonday",
              "wednesdayToTuesday",
              "thursdayToWednesday",
              "fridayToThursday",
              "saturdayToFriday",
              "sundayToSaturday"
            ],
            "type": "string",
            "description": "The delivery week for the budget"
          },
          "budgetAmount": {
            "$ref": "#/components/schemas/NillableDecimal"
          }
        },
        "description": "ad set budget read model"
      },
      "PatchAdSetScheduling": {
        "type": "object",
        "properties": {
          "startDate": {
            "$ref": "#/components/schemas/NillableDateTime"
          },
          "endDate": {
            "$ref": "#/components/schemas/NillableDateTime"
          }
        },
        "description": "ad set schedule patch model"
      },
      "PatchAdSetBidding": {
        "type": "object",
        "properties": {
          "bidAmount": {
            "$ref": "#/components/schemas/NillableDecimal"
          }
        },
        "description": "ad set bidding patch model"
      },
      "PatchAdSetBudget": {
        "type": "object",
        "properties": {
          "budgetStrategy": {
            "enum": [
              "capped",
              "uncapped"
            ],
            "type": "string",
            "description": "Whether your budget is capped or not"
          },
          "budgetRenewal": {
            "enum": [
              "undefined",
              "daily",
              "monthly",
              "lifetime"
            ],
            "type": "string",
            "description": "The pace of the budget renewal"
          },
          "budgetDeliverySmoothing": {
            "enum": [
              "accelerated",
              "standard"
            ],
            "type": "string",
            "description": "The pace at which the budget can be spent"
          },
          "budgetDeliveryWeek": {
            "enum": [
              "undefined",
              "mondayToSunday",
              "tuesdayToMonday",
              "wednesdayToTuesday",
              "thursdayToWednesday",
              "fridayToThursday",
              "saturdayToFriday",
              "sundayToSaturday"
            ],
            "type": "string",
            "description": "The delivery week for the budget"
          },
          "budgetAmount": {
            "$ref": "#/components/schemas/NillableDecimal"
          }
        },
        "description": "ad set budget patch model"
      },
      "NillableDateTime": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "structure that encapsulates an object that have valid business null values. If the structure is provided (i.e. not null), then the value in it, even null, is provided."
      },
      "NillableDecimal": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "double"
          }
        },
        "description": "structure that encapsulates an object that have valid business null values. If the structure is provided (i.e. not null), then the value in it, even null, is provided."
      },
      "AdSetDeliveryLimitations": {
        "type": "object",
        "properties": {
          "environments": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "enum": [
                "web",
                "inApp"
              ],
              "type": "string"
            },
            "description": "List of environments which the ad set should target"
          },
          "devices": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "enum": [
                "other",
                "desktop",
                "mobile",
                "tablet"
              ],
              "type": "string"
            },
            "description": "List of devices which the ad set should target"
          },
          "operatingSystems": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "enum": [
                "android",
                "ios",
                "unknown"
              ],
              "type": "string"
            },
            "description": "List of operating systems which the ad set should target"
          }
        },
        "description": "ad set delivery limitations model"
      },
      "AdSetGeoLocation": {
        "type": "object",
        "properties": {
          "countries": {
            "$ref": "#/components/schemas/NillableAdSetTargetingRule"
          },
          "subdivisions": {
            "$ref": "#/components/schemas/NillableAdSetTargetingRule"
          },
          "zipCodes": {
            "$ref": "#/components/schemas/NillableAdSetTargetingRule"
          }
        },
        "description": "ad set geolocation model"
      },
      "AdSetFrequencyCapping": {
        "type": "object",
        "properties": {
          "frequency": {
            "enum": [
              "hourly",
              "daily",
              "lifetime",
              "advanced"
            ],
            "type": "string",
            "description": "Period on which impression limitation is calculated"
          },
          "maximumImpressions": {
            "type": "integer",
            "description": "Maximum impressions for the specified period",
            "format": "int32"
          }
        },
        "description": "ad set frequency capping model"
      },
      "NillableAdSetTargetingRule": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/AdSetTargetingRule"
          }
        },
        "description": "structure that encapsulates an object that have valid business null values. If the structure is provided (i.e. not null), then the value in it, even null, is provided."
      },
      "AdSetTargetingRule": {
        "type": "object",
        "properties": {
          "operand": {
            "enum": [
              "undefined",
              "in",
              "notIn"
            ],
            "type": "string",
            "description": "Operand which states how the values should be applied"
          },
          "values": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of values to apply"
          }
        },
        "description": "ad set targeting rule model"
      },
      "ErrorMessage": {
        "type": "object",
        "properties": {
          "traceId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "code": {
            "type": "string",
            "readOnly": true
          },
          "instance": {
            "type": "string",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "readOnly": true
          },
          "detail": {
            "type": "string",
            "readOnly": true
          }
        },
        "description": "This is the message defining an error"
      },
      "StatisticsReportQueryMessage": {
        "required": [
          "dimensions",
          "metrics",
          "currency",
          "format",
          "startDate",
          "endDate"
        ],
        "type": "object",
        "properties": {
          "advertiserIds": {
            "type": "string",
            "description": "The comma-separated list of advertiser ids. If empty, all the advertisers in the portfolio will be used"
          },
          "dimensions": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "enum": [
                "AdsetId",
                "Adset",
                "AdvertiserId",
                "Advertiser",
                "CategoryId",
                "Category",
                "Hour",
                "Day",
                "Week",
                "Month",
                "Year",
                "Os",
                "Device"
              ],
              "type": "string"
            },
            "description": "The dimensions for the report."
          },
          "metrics": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of metrics to report."
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the report. ISO 4217 code (three-letter capitals)."
          },
          "format": {
            "type": "string",
            "description": "The file format of the generated report: csv, xml, excel or json."
          },
          "timezone": {
            "type": "string",
            "description": "The timezone used for the report. Timezone Database format (Tz).",
            "default": "UTC"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the report. Date component of ISO 8061 format, any time or timezone component is ignored.",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the report. Date component of ISO 8061 format, any time or timezone component is ignored.",
            "format": "date-time"
          }
        },
        "description": "This is the message defining the query for Adset report",
        "example": {
          "advertiserIds": "123,456,789",
          "dimensions": [
            "AdsetId",
            "Adset",
            "AdvertiserId",
            "Advertiser",
            "CategoryId",
            "Category",
            "Hour",
            "Day",
            "Week",
            "Month",
            "Year",
            "Os",
            "Device"
          ],
          "metrics": [
            "Clicks",
            "Displays",
            "Cpc",
            "Visits"
          ],
          "currency": "EUR",
          "format": "csv",
          "timezone": "Europe/Paris",
          "startDate": "2021-01-01T00:00:00.0000000+00:00",
          "endDate": "2021-01-01T00:00:00.0000000+00:00"
        }
      },
      "TransactionsReportQueryDataMessage": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionsReportQueryEntityMessage"
            }
          }
        },
        "description": "Contains queries for Transactions report",
        "example": {
          "data": [
            {
              "type": "TransactionsReport",
              "attributes": {
                "advertiserIds": "123,456,789",
                "eventType": "display",
                "currency": "EUR",
                "format": "csv",
                "timezone": "Europe/Paris",
                "startDate": "2021-01-01T00:00:00.0000000+00:00",
                "endDate": "2021-01-01T00:00:00.0000000+00:00"
              }
            }
          ]
        }
      },
      "TransactionsReportQueryEntityMessage": {
        "required": [
          "type",
          "attributes"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/TransactionsReportQueryMessage"
          }
        },
        "description": "Contains a query for Transaction report and its type"
      },
      "TransactionsReportQueryMessage": {
        "required": [
          "currency",
          "format",
          "startDate",
          "endDate"
        ],
        "type": "object",
        "properties": {
          "advertiserIds": {
            "type": "string",
            "description": "The comma-separated list of advertiser ids. If empty, all the advertisers in the portfolio will be used"
          },
          "eventType": {
            "type": "string",
            "description": "Apply a filter on Event type ."
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the report. ISO 4217 code (three-letter capitals)."
          },
          "format": {
            "type": "string",
            "description": "The file format of the generated report: csv, xml, excel or json."
          },
          "timezone": {
            "type": "string",
            "description": "The timezone used for the report. Timezone Database format (Tz).",
            "default": "UTC"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the report. Date component of ISO 8061 format, any time or timezone component is ignored.",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the report. Date component of ISO 8061 format, any time or timezone component is ignored.",
            "format": "date-time"
          }
        },
        "description": "This is the message defining the query for Transaction report"
      },
      "GetPortfolioResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CriteoApiDataOfPortfolioMessage"
            },
            "description": "The response's primary data"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CriteoApiError"
            },
            "description": "Error list returned by the Criteo API \r\nFor successful requests it is empty"
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CriteoApiWarning"
            },
            "description": "Warnings list returned by the Criteo API\r\nIn some situations the operations are successful but it may be useful to issue warnings to the API consumer.\r\nFor example the endpoint, entity or field is deprecated. Warnings are like compiler warnings, they indicate that problems may occur in the future."
          }
        },
        "description": "Portfolio fetch Response"
      },
      "CriteoApiDataOfPortfolioMessage": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "campaign",
              "adset",
              "ad",
              "advertiser",
              "agency",
              "publisher",
              "address",
              "client",
              "contact",
              "industry"
            ],
            "type": "string",
            "description": "A string containing the entity type",
            "example": "campaign"
          },
          "id": {
            "type": "string",
            "description": "A opaque string containing the unique Id of the entity"
          },
          "attributes": {
            "$ref": "#/components/schemas/PortfolioMessage"
          },
          "meta": {
            "type": "object",
            "description": "A meta object that contains application-specific metadata"
          }
        },
        "description": "Generic Criteo API successful data model"
      },
      "CriteoApiError": {
        "type": "object",
        "properties": {
          "traceId": {
            "type": "string",
            "description": "The correlation ID provided by the gateway"
          },
          "type": {
            "enum": [
              "access_control",
              "authentication",
              "authorization",
              "availability",
              "deprecation",
              "quota",
              "validation"
            ],
            "type": "string",
            "description": "A machine-readable code specifying error category",
            "example": "access_control"
          },
          "code": {
            "enum": [
              "internal-error",
              "deprecated-field",
              "endpoint-deprecated",
              "required-field",
              "invalid-date-format",
              "invalid",
              "invalid-ranged",
              "invalid-timespan"
            ],
            "type": "string",
            "description": "A machine-readable error code string in kabab-case. Unique across Criteo",
            "example": "internal-error"
          },
          "instance": {
            "type": "string",
            "description": "A URI reference that identifies the specific occurrence of the problem"
          },
          "title": {
            "type": "string",
            "description": "A short, human-readable summary of the problem type."
          },
          "detail": {
            "type": "string",
            "description": "A human-readable explanation specific to this occurrence of the problem."
          },
          "source": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A machine-readable structure to reference to the exact location(s) causing the error(s)."
          }
        },
        "description": "Criteo API response error"
      },
      "CriteoApiWarning": {
        "type": "object",
        "properties": {
          "traceId": {
            "type": "string",
            "description": "The correlation ID provided by the gateway"
          },
          "type": {
            "enum": [
              "access_control",
              "authentication",
              "authorization",
              "availability",
              "deprecation",
              "quota",
              "validation"
            ],
            "type": "string",
            "description": "A machine-readable code specifying error category",
            "example": "access_control"
          },
          "code": {
            "enum": [
              "internal-error",
              "deprecated-field",
              "endpoint-deprecated",
              "required-field",
              "invalid-date-format",
              "invalid",
              "invalid-ranged",
              "invalid-timespan"
            ],
            "type": "string",
            "description": "A machine-readable error code string in kabab-case. Unique across Criteo",
            "example": "internal-error"
          },
          "instance": {
            "type": "string",
            "description": "A URI reference that identifies the specific occurrence of the problem"
          },
          "title": {
            "type": "string",
            "description": "A short, human-readable summary of the problem type."
          },
          "detail": {
            "type": "string",
            "description": "A human-readable explanation specific to this occurrence of the problem."
          }
        },
        "description": "Criteo API response warning"
      },
      "PortfolioMessage": {
        "type": "object",
        "properties": {
          "advertiserName": {
            "type": "string"
          }
        },
        "description": "Class with elementary info about advertiser"
      },
      "CampaignMessage": {
        "type": "object",
        "properties": {
          "campaignType": {
            "type": "string",
            "enum": [
              "MidFunnel",
              "LowerFunnel",
              "AudienceSelling"
            ]
          },
          "advertiserName": {
            "type": "string"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "budgetId": {
            "type": "integer",
            "format": "int32"
          },
          "campaignId": {
            "type": "integer",
            "format": "int32"
          },
          "campaignName": {
            "type": "string"
          },
          "advertiserId": {
            "type": "integer",
            "format": "int32"
          },
          "campaignStatus": {
            "type": "string",
            "enum": [
              "Running",
              "Archived",
              "NotRunning"
            ]
          },
          "campaignBid": {
            "$ref": "#/components/schemas/BidMessage"
          }
        }
      },
      "BidMessage": {
        "type": "object",
        "properties": {
          "bidValue": {
            "type": "number",
            "format": "double"
          },
          "bidCurrency": {
            "type": "string"
          },
          "bidType": {
            "type": "string",
            "enum": [
              "Unknown",
              "CPC",
              "COS",
              "CPO"
            ]
          },
          "bidIsPending": {
            "type": "boolean"
          }
        }
      },
      "CategoryMessage": {
        "type": "object",
        "properties": {
          "categoryHashCode": {
            "type": "integer",
            "format": "int32"
          },
          "categoryName": {
            "type": "string"
          },
          "catalogId": {
            "type": "integer",
            "format": "int32"
          },
          "catalogName": {
            "type": "string"
          },
          "advertiserId": {
            "type": "integer",
            "format": "int32"
          },
          "advertiserName": {
            "type": "string"
          },
          "campaignId": {
            "type": "integer",
            "format": "int32"
          },
          "campaignName": {
            "type": "string"
          },
          "averagePrice": {
            "type": "number",
            "format": "double"
          },
          "numberOfProducts": {
            "type": "integer",
            "format": "int32"
          },
          "categoryBid": {
            "$ref": "#/components/schemas/BidMessage"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "CampaignBidMessage": {
        "type": "object",
        "properties": {
          "campaignId": {
            "type": "integer",
            "format": "int32"
          },
          "campaignName": {
            "type": "string"
          },
          "campaignBid": {
            "$ref": "#/components/schemas/BidMessage"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryBidMessage"
            }
          },
          "campaignStatus": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CategoryBidMessage": {
        "type": "object",
        "properties": {
          "categoryHashcode": {
            "type": "integer",
            "format": "int32"
          },
          "categoryName": {
            "type": "string"
          },
          "categoryBid": {
            "$ref": "#/components/schemas/BidMessage"
          }
        }
      },
      "CampaignBidChangeRequest": {
        "type": "object",
        "properties": {
          "campaignId": {
            "type": "integer",
            "format": "int32"
          },
          "bidValue": {
            "type": "number",
            "format": "double"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryBidChangeRequest"
            }
          }
        }
      },
      "CategoryBidChangeRequest": {
        "type": "object",
        "properties": {
          "categoryHashcode": {
            "type": "integer",
            "format": "int32"
          },
          "bidValue": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "CampaignBidChangeResponseMessageWithDetails": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "details": {
            "$ref": "#/components/schemas/CampaignBidChangeResponse"
          }
        }
      },
      "CampaignBidChangeResponse": {
        "type": "object",
        "properties": {
          "campaignId": {
            "type": "integer",
            "format": "int32"
          },
          "errorCode": {
            "type": "string",
            "enum": [
              "OK",
              "AccessDenied",
              "EnabledCategoryNumberExceeded",
              "CategoriesNotEnabled",
              "DuplicateCatalogEntry",
              "InvalidCatalogId",
              "InvalidCategoryHashcode",
              "InactiveCategory",
              "DuplicateCategoryEntry",
              "BiddingCategoriesOnThisCampaignNotAllowed",
              "CampaignNotInPortfolioOrNotActive",
              "DuplicateCampaignEntry",
              "BiddingOnThisCampaignNotAllowed",
              "BidNotInRange",
              "FourDecimalsNotAllowed",
              "BiddingOnTargetBudgetCampaignNotAllowed"
            ]
          },
          "errorMessage": {
            "type": "string",
            "readOnly": true
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryUpdateError"
            }
          }
        }
      },
      "CategoryUpdateError": {
        "type": "object",
        "properties": {
          "categoryHashCode": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "OK",
              "AccessDenied",
              "EnabledCategoryNumberExceeded",
              "CategoriesNotEnabled",
              "DuplicateCatalogEntry",
              "InvalidCatalogId",
              "InvalidCategoryHashcode",
              "InactiveCategory",
              "DuplicateCategoryEntry",
              "BiddingCategoriesOnThisCampaignNotAllowed",
              "CampaignNotInPortfolioOrNotActive",
              "DuplicateCampaignEntry",
              "BiddingOnThisCampaignNotAllowed",
              "BidNotInRange",
              "FourDecimalsNotAllowed",
              "BiddingOnTargetBudgetCampaignNotAllowed"
            ]
          },
          "errorMessage": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "CategoryUpdatesPerCatalog": {
        "type": "object",
        "properties": {
          "catalogId": {
            "type": "integer",
            "format": "int32"
          },
          "categoriess": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryUpdateInput"
            }
          }
        }
      },
      "CategoryUpdateInput": {
        "type": "object",
        "properties": {
          "categoryHashCode": {
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "CategoryUpdatesPerCatalogErrorMessageWithDetails": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "details": {
            "$ref": "#/components/schemas/CategoryUpdatesPerCatalogError"
          }
        }
      },
      "CategoryUpdatesPerCatalogError": {
        "type": "object",
        "properties": {
          "catalogId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "enum": [
              "OK",
              "AccessDenied",
              "EnabledCategoryNumberExceeded",
              "CategoriesNotEnabled",
              "DuplicateCatalogEntry",
              "InvalidCatalogId",
              "InvalidCategoryHashcode",
              "InactiveCategory",
              "DuplicateCategoryEntry",
              "BiddingCategoriesOnThisCampaignNotAllowed",
              "CampaignNotInPortfolioOrNotActive",
              "DuplicateCampaignEntry",
              "BiddingOnThisCampaignNotAllowed",
              "BidNotInRange",
              "FourDecimalsNotAllowed",
              "BiddingOnTargetBudgetCampaignNotAllowed"
            ]
          },
          "errorMessage": {
            "type": "string",
            "readOnly": true
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryUpdateError"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Authorization": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://api.criteo.com/oauth2/token",
            "scopes": {}
          }
        }
      }
    }
  },
  "security": [
    {
      "Authorization": []
    }
  ],
  "x-samples-languages": [
    "java",
    "python",
    "php",
    "csharp",
    "javascript",
    "curl",
    "ruby"
  ]
}
