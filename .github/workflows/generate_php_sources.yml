name: Generate PHP Sources

on:
  push:
    branches:
      - main
    paths:
      - 'api-specifications/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      # Extract prefixes from all files in api-specifications directory
      - name: Get all files and extract prefixes
        id: extract_prefix
        run: |
          # Get all JSON files in api-specifications directory
          FILES=$(find api-specifications -name "*.json" -type f)
          
          if [ -n "$FILES" ]; then
            echo "Found files:"
            echo "$FILES"
            
            # Extract prefixes from all files
            PREFIXES=""
            for file in $FILES; do
              # Extract filename without path and extension
              filename=$(basename "$file" .json)
              # Extract prefix (everything before the first underscore)
              raw_prefix=$(echo "$filename" | cut -d'_' -f1)
              prefix=$(echo "$raw_prefix" | tr '[:lower:]' '[:upper:]')
              echo "File: $file -> Raw prefix: '$raw_prefix' -> Uppercase prefix: '$prefix'"
              
              # Add to prefixes list if not already present
              if [[ ! "$PREFIXES" =~ $prefix ]]; then
                PREFIXES="$PREFIXES $prefix"
              fi
            done
            
            # Trim whitespace and use the first prefix for now
            PREFIXES=$(echo "$PREFIXES" | xargs)
            FIRST_PREFIX=$(echo "$PREFIXES" | cut -d' ' -f1)
            
            echo "prefixes=$PREFIXES" >> $GITHUB_OUTPUT
            echo "prefix=$FIRST_PREFIX" >> $GITHUB_OUTPUT
            echo "Found prefixes: $PREFIXES"
            echo "Using prefix: $FIRST_PREFIX"
          else
            echo "No JSON files found in api-specifications directory"
            echo "prefixes=" >> $GITHUB_OUTPUT
            echo "prefix=DEFAULT" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set up JDK 1.8
        uses: actions/setup-java@v4
        with:
          java-version: 8
          distribution: temurin

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      
      - name: Set up PHP Composer
        uses: php-actions/composer@v6
        with:
          version: 2
          php_version: 8.0
          command: about

      - uses: webfactory/ssh-agent@v0.9.1
        with:
            ssh-private-key: |
              ${{ secrets.PHP_SDK_REPO_PRIVATE_KEY_MS }}
              ${{ secrets.PHP_SDK_REPO_PRIVATE_KEY_RM }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install GitPython
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Generate SDKs
        run: ./gradlew :generator:php:generateClient
        shell: bash

      - name: Test SDKs
        run: python ./scripts/test_sdk.py --language php
        env:
          ${{ format('TEST_CLIENT_ID_{0}', steps.extract_prefix.outputs.prefix) }}: ${{ secrets[format('SDK_TEST_CLIENT_ID_{0}', steps.extract_prefix.outputs.prefix)] }}
          ${{ format('TEST_CLIENT_SECRET_{0}', steps.extract_prefix.outputs.prefix) }}: ${{ secrets[format('SDK_TEST_CLIENT_SECRET_{0}', steps.extract_prefix.outputs.prefix)] }}
          ${{ format('TEST_APPLICATION_ID_{0}', steps.extract_prefix.outputs.prefix) }}: ${{ secrets[format('SDK_TEST_APPLICATION_ID_{0}', steps.extract_prefix.outputs.prefix)] }}
        shell: bash

      - name: Upload SDKs
        uses: actions/upload-artifact@v4
        with:
          name: generated-sources-php
          path: ./generated-sources/php

      - name: Push SDKs
        run: python ./scripts/push_sdk.py --language php
        shell: bash

      - name: Send success notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: criteo-api-sdk-generator
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: PHP build succeeded. <https://github.com/criteo/criteo-api-sdk-generator/actions/runs/${{github.run_id}}|Link to build>
          SLACK_USERNAME: sdk-generation-bot
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_FOOTER: ''
          SLACK_ICON_EMOJI: green_check_mark

      - name: Send failure notification
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: criteo-api-sdk-generator
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: PHP build failed. <https://github.com/criteo/criteo-api-sdk-generator/actions/runs/${{github.run_id}}|Link to build>
          SLACK_USERNAME: sdk-generation-bot
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_FOOTER: ''
          SLACK_ICON_EMOJI: x
