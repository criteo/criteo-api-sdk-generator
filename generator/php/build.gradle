import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo1.maven.org/maven2" }
    }
    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:6.3.0"
    }
}

apply plugin: 'java-library'
apply plugin: 'org.openapi.generator'

ext {
    jar.enabled = false
}

def clientOutputDir = "$rootDir/$rootProject.generatedClientsDirName/php"
def resourcesDir = "$projectDir/resources".toString()
def criteoPackage = project.properties["package.name.base"]
def generatorVersion = project.properties["generator.version"]
def technologyStack = "php"
def nameSeparator = '\\'
def language = technologyStack.replaceAll(/[^a-zA-Z]/,"").toLowerCase()

task cleanPreviousDist(type: Delete) {
    group 'Criteo'
    description 'Clean up client output folder'

    delete clientOutputDir
    followSymlinks = true
}

task generateClient(type: GradleBuild) {
    group 'Criteo'
    description "Generate the {language.toUpperCase()} client using openapi-generator and custom templates".toString()

    def taskList = ['cleanPreviousDist'];

	rootProject.swaggerSourceList.each {
        def parsedApiName = it.getName().replace(".json", "").toLowerCase();
        def (criteoService, apiVersionFromName) = parsedApiName.tokenize('_');
        def criteoApiVersion = apiVersionFromName.replace('-', '_');
        
        def clientOutputDirPerVersion = clientOutputDir + "/" + parsedApiName;
        def specPath = it.path;
        def isPreviewVersion = criteoApiVersion == 'preview';
  
        def versionInNamespace =  criteoApiVersion
        if (versionInNamespace.matches("[0-9].*"))
             versionInNamespace= "v" + versionInNamespace

        def namespaceBase = "${criteoPackage}.${criteoService}.${versionInNamespace}".replace('.', nameSeparator).toString(); // example: criteo\api\marketingsolutions\v2021_10
        
        def artifactVersion = isPreviewVersion ? '0' : criteoApiVersion.replaceAll("_",".").toString()
        artifactVersion += ".${generatorVersion}.${getFormattedDate()}".toString() // example : 2021.01.0.211110 for stable , 0.0.211110 for preview

        def generateTask = task("openApiGenerate_${technologyStack}_" + parsedApiName, type: GenerateTask.class) {
                configFile = "$projectDir/generatorConfiguration.yaml".toString()
                generatorName = "$language".toString()
                templateDir = "$resourcesDir/templates/".toString()
                inputSpec = specPath
                outputDir = clientOutputDirPerVersion
                removeOperationIdPrefix = true
                generateApiTests = false
                generateModelTests = false
                gitUserId = 'criteo'
                gitRepoId = "criteo-api-${criteoService}-${language}-sdk".toString()
                configOptions = [
                        groupId                 : 'criteo',
                        artifactVersion         : "${artifactVersion}".toString(),
                        hideGenerationTimestamp : 'true',
                        invokerPackage          : "${namespaceBase}".toString(),
                        packageName             : "criteo-api-${criteoService}-sdk".toString(),
                 ]
        }


        def copyLicense = task("copyLicense_" + technologyStack + "_" + parsedApiName, type: Copy) {
            group 'Criteo'
            description 'Copy the license into the client output folder'

            from "$projectDir/../LICENSE"
            into clientOutputDirPerVersion
            rename 'LICENSE', 'LICENSE.txt'
        };

        def removeUnwantedFiles = task("removeUnwantedFiles_" + technologyStack + "_" + parsedApiName, type: Delete) {
            group 'Criteo'
            description 'Remove files generated by openapi-generator that we don\'t want to push'

            delete fileTree(clientOutputDirPerVersion) {
                include '.openapi-generator-ignore', '.travis.yml', 'git_push.sh'
            }
            followSymlinks = true
        }

        taskList << generateTask.name
        taskList << copyLicense.name
        taskList << removeUnwantedFiles.name
    }

    generateClient.dependsOn(taskList);
}

def getFormattedDate() {
    def date = new Date()
    def formattedDate = date.format('yyMMdd')
    return formattedDate
}
