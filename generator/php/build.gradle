import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo1.maven.org/maven2" }
    }
    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:5.2.1"
    }
}

apply plugin: 'java-library'
apply plugin: 'org.openapi.generator'

ext {
    jar.enabled = false
}

def clientOutputDir = "$projectDir/../../$rootProject.gereratedClientsDirName/php".toString()
def resourcesDir = "$projectDir/resources".toString()
def criteoPackage = project.properties["package.name.base"]
def generatorVersion = project.properties["generator.version"]
def technologyStack = "php"
def nameSeparator = '\\'

task cleanPreviousDist(type: Delete) {
    group 'Criteo'
    description 'Clean up client output folder'

    delete clientOutputDir
    followSymlinks = true
}

task generateClient(type: GradleBuild) {
    group 'Criteo'
    description 'Generate the PHP client using openapi-generator and custom templates'

    def taskList = ['cleanPreviousDist'];

	rootProject.swaggerSourceList.each {
        def jsonFile = file(it.path);
        def parsedJson = new groovy.json.JsonSlurper().parseText(jsonFile.text);

        def parsedApiName = it.getName().replace(".json", "").toLowerCase();
        def (criteoService, apiVersionFromName) = parsedApiName.tokenize('_');
        def criteoApiVersion = apiVersionFromName.replace('-', '_');
        
        def clientOutputDirPerVersion = clientOutputDir + "/" + parsedApiName;
        def specPath = it.path;
        def packageBase =  criteoApiVersion;
        if (packageBase.matches("[0-9].*"))
             packageBase= "v" + packageBase;

        packageBase = "${criteoPackage}.${criteoService}.${packageBase}".replace('.', nameSeparator).toString(); // example: criteo\api\marketingsolutions\v2021_10
        def packageVersion = "${criteoApiVersion}.${generatorVersion}.${getFormattedDate()}"; // example : 2021_10.1.211110

        def generateTask = task("openApiGenerate_php_" + parsedApiName, type: GenerateTask.class) {
                configFile = "$projectDir/generatorConfiguration.yaml".toString()
                generatorName = "php"
                templateDir = "$resourcesDir/templates/".toString()
                inputSpec = specPath
                outputDir = clientOutputDirPerVersion
                removeOperationIdPrefix = true
                generateApiTests = false
                generateModelTests = false
                configOptions = [
                        apiVersion              : parsedJson.info.version,
                        packageName             : "criteo-api-${criteoService}-sdk-${technologyStack}".toString(),
                        invokerPackage          : "${packageBase}".toString(),
                        packageUrl              : 'https://github.com/criteo/criteo-api-php-sdk',
                        hideGenerationTimestamp : 'true',
                        artifactId              : "criteo-api-${criteoService}-sdk-${technologyStack}".toString(),
                        packageVersion          : "${packageVersion}".toString(), // v2021_10.1.211110
                        groupId                 :  'criteo',
                        version                 : '1.0.0',
                        description             : "PHP SDK for Criteo API ${criteoService} for ${criteoApiVersion} version".toString(),
                        sourceCompatibility     : '1.8'
                ]
        }


        def copyLicense = task("copyLicense_php_" + parsedApiName, type: Copy) {
            group 'Criteo'
            description 'Copy the license into the client output folder'

            from "$projectDir/../LICENSE"
            into clientOutputDirPerVersion
            rename 'LICENSE', 'LICENSE.txt'
        };

        def copyExamples = task("copyExamples_php_" + parsedApiName, type: Copy) {
            group 'Criteo'
            description 'Copy the PHP examples into the client output folder'

            from "$resourcesDir/examples"
            into "$clientOutputDirPerVersion/examples"
        }

        def removeUnwantedFiles = task("removeUnwantedFiles_php_" + parsedApiName, type: Delete) {
            group 'Criteo'
            description 'Remove files generated by openapi-generator that we don\'t want to push'

            delete fileTree(clientOutputDirPerVersion) {
                include '.openapi-generator-ignore', '.travis.yml', 'push_sdk.sh'
            }
            followSymlinks = true
        }

        taskList << generateTask.name
        taskList << copyLicense.name
        taskList << copyExamples.name
        taskList << removeUnwantedFiles.name
    }

    generateClient.dependsOn(taskList);
}

def clientPatch = hasProperty('buildNumber') ? buildNumber : '0'
def getFormattedDate() {
    def date = new Date()
    def formattedDate = date.format('yyMMdd')
    return formattedDate
}