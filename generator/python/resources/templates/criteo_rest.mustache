import json
from datetime import datetime, timedelta
from {{packageName}}.rest import RESTClientObject
from {{packageName}}.exceptions import ApiException
from {{packageName}}.rest import RESTClientObject

class CriteoRESTClientObject(RESTClientObject):
    def __init__(self, configuration, pools_size=4, maxsize=None):
        super().__init__(configuration, pools_size, maxsize)

        self.token = None
        self.client_id = configuration.username
        self.client_secret = configuration.password
        self.grant_type = 'client_credentials'
        self.access_token = configuration.access_token
        self.host = configuration.host

    def request(self, method, url, query_params=None, headers=None,
                body=None, post_params=None, no_auth=False, _preload_content=True,
                _request_timeout=None):
        """Perform requests.

        :param method: http request method
        :param url: http request url
        :param query_params: query parameters in the url
        :param headers: http request headers
        :param body: request json body, for `application/json`
        :param post_params: request post parameters,
                            `application/x-www-form-urlencoded`
                            and `multipart/form-data`
        :param no_auth: if True, token is not refreshed
                                 and authorization header is not set
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        """

        headers = headers or {}
        if not no_auth:
            access_token = self.refresh_token(headers)
            headers['Authorization'] = 'Bearer ' + (access_token or '')

        if 'Content-Type' not in headers:
            headers['Content-Type'] = 'application/json'

        return super().request(method, url, query_params, headers, body, post_params, _preload_content, _request_timeout)

    def refresh_token(self, headers) -> str:
        missing_credentials = self.client_id is None or self.client_id == '' \
                              or self.client_secret is None or self.client_secret == ''

        if self.token and not self.token.is_valid_enough():
            self.token = None

        if self.token is None:
            if missing_credentials:
                return self.access_token

            self.token = self.call_auth_endpoint(headers)

        return self.token.access_token

    def call_auth_endpoint(self, headers):
        oauth_url = self.host + '/oauth2/token'
        new_headers = {'Accept': 'application/json',
                       'Content-Type': 'application/x-www-form-urlencoded',
                       'User-Agent': headers['User-Agent']}
        post_params = [('client_id', self.client_id),
                       ('client_secret', self.client_secret),
                       ('grant_type', self.grant_type)]
        try:
            params = []
            response = self.request("POST", oauth_url,
                                    headers=new_headers,
                                    query_params=params,
                                    post_params=post_params,
                                    no_auth=True,
                                    _preload_content=True,
                                    _request_timeout=None,
                                    body=None)
            data = json.loads(response.data)
            return Token(data['access_token'], data['expires_in'])
        except ApiException as e:
            raise self._enrich_exception_message(e, oauth_url)

    @staticmethod
    def _enrich_exception_message(e, url):
        try:
            data = json.loads(e.body or {})
        except ValueError:
            data = {}
        data["token_error"] = "Cannot refresh token by calling '" + url + "'"
        e.body = data
        return e

class Token(object):

    def __init__(self, access_token, expires_in):
        self.access_token = access_token
        self.expires_on = self.calc_expires_on(expires_in)

    def is_valid_enough(self):
        return self.expires_on > (datetime.now() + timedelta(seconds=15))

    @staticmethod
    def calc_expires_on(expires_in):
        return datetime.now() + timedelta(seconds=int(expires_in))