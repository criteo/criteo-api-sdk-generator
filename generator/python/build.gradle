import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo1.maven.org/maven2" }
    }

    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:6.3.0"
    }
}

apply plugin: 'java-library'
apply plugin: 'org.openapi.generator'

ext {
    jar.enabled = false
}

def clientOutputDir = "$projectDir/../../$rootProject.gereratedClientsDirName/python".toString()
def resourcesDir = "$projectDir/resources".toString()
def buildDir = "$projectDir/build"
def criteoPackage = project.properties["package.name.base"]
def generatorVersion = project.properties["generator.version"]
def technologyStack = "python"
def nameSeparator = '_'
def language = technologyStack.replaceAll(/[^a-zA-Z]/,"").toLowerCase()

task cleanPreviousDist(type: Delete) {
    group 'Criteo'
    description 'Clean up client output folder'

    delete clientOutputDir
    followSymlinks = true
}

task generateClient(type: GradleBuild) {
    group 'Criteo'
    description 'Generate the ${language.toUpperCase()} client using openapi-generator and custom templates'

    def taskList = ['cleanPreviousDist'];

	rootProject.swaggerSourceList.each {
        def jsonFile = file(it.path);
        def parsedJson = new groovy.json.JsonSlurper().parseText(jsonFile.text);

		def parsedApiName = it.getName().replace(".json", "").toLowerCase();
        def taskSuffix = language + "_" + parsedApiName
        def (criteoService, apiVersionFromName) = parsedApiName.tokenize('_');
        def criteoApiVersion = apiVersionFromName.replace('-', '_');
        
        def clientOutputDirPerVersion = clientOutputDir + "/" + parsedApiName;
        def specPath = it.path;
        def isPreviewVersion = criteoApiVersion == 'preview';
  
        def versionInNamespace =  criteoApiVersion
        if (versionInNamespace.matches("[0-9].*"))
             versionInNamespace= "v" + versionInNamespace

        def namespaceBase = "${criteoPackage}.${criteoService}.${versionInNamespace}".replace('.', nameSeparator).toString(); // example: criteo_api_marketingsolutions_v2021_10
        
        def artifactVersion = isPreviewVersion ? '0' : criteoApiVersion.replaceAll("_",".").toString()
        artifactVersion += ".${generatorVersion}.${getFormattedDate()}".toString() // example : 2021.01.0.211110 for stable , 0.0.211110 for preview
		
		def createConfig  = task("createConfig_" + taskSuffix, type: Copy)
		{
			mustRunAfter cleanPreviousDist
            from "${projectDir}/generatorConfiguration.yaml"
            into "${buildDir}"
            rename  {filename -> namespaceBase + ".yaml" }
            filter { line -> line.replaceAll('%sdkFolder%', namespaceBase) }
        }
 
        def generateTask = task("openApiGenerate_" + taskSuffix, type: GenerateTask.class) {
			generatorName = "python-prior"
			configFile = "${buildDir}/${namespaceBase}.yaml"
			templateDir = "$resourcesDir/templates/".toString()
			inputSpec = specPath
			outputDir = clientOutputDirPerVersion
			removeOperationIdPrefix = true
			generateApiTests = false
			generateModelTests = false
			configOptions = [
					groupId                 : 'criteo',
					apiVersion              : "${artifactVersion}".toString(),
					artifactId              : "criteo-api-${criteoService}-sdk".toString(),
					description             : "${language.toUpperCase()} SDK for Criteo API ${criteoService} for ${criteoApiVersion} version".toString(),
					hideGenerationTimestamp : 'true',
					invokerPackage          : 'Criteo\\SDK',
					packageName             : "${namespaceBase}".toString(),
					packageUrl              : "https://github.com/criteo/criteo-api-${language}-sdk".toString(),
					packageVersion          : "${artifactVersion}".toString(), // v2021_10.1.211109
					projectName             : "criteo-api-${criteoService}-sdk".toString(),
			]
			mustRunAfter createConfig
        }

        def copyLicense = task("copyLicense_" + taskSuffix, type: Copy) {
            group 'Criteo'
            description 'Copy the license into the client output folder'

            from "$projectDir/../LICENSE"
            into clientOutputDirPerVersion
            rename 'LICENSE', 'LICENSE.txt'
        }

        def removeUnwantedFiles = task("removeUnwantedFiles_" + taskSuffix, type: Delete) {
            group 'Criteo'
            description 'Remove files generated by openapi-generator that we don\'t want to push'

            delete fileTree(clientOutputDirPerVersion) {
                include '.openapi-generator-ignore', '.travis.yml', 'git_push.sh'
            }
            followSymlinks = true
        }

        taskList << generateTask.name
        taskList << copyLicense.name
        taskList << createConfig.name
        taskList << removeUnwantedFiles.name
    }

    generateClient.dependsOn(taskList);
}

def getFormattedDate() {
    def date = new Date()
    def formattedDate = date.format('yyMMdd')
    return formattedDate
}
