import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo1.maven.org/maven2" }
    }

    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:5.2.1"
    }
}

apply plugin: 'java-library'
apply plugin: 'org.openapi.generator'

ext {
    artifactId = "python-client-generator"
    groupId = "com.criteo.mapi"
    version = '1.0.0'
    description = 'Criteo Generator for Python Client'
    sourceCompatibility = '1.8'
    jar.enabled = false
}

def clientBaseOutputDir = "$projectDir/../../$rootProject.gereratedClientsDirName/python".toString()
def resourcesDir = "$projectDir/resources".toString()

task cleanPreviousDist(type: Delete) {
    group 'Criteo'
    description 'Clean up client output folder'

    delete clientBaseOutputDir
    followSymlinks = true
}

task generateClient(type: GradleBuild) {
    group 'Criteo'
    description 'Generate the Python client using openapi-generator and custom templates'

    def taskList = ['cleanPreviousDist'];

	rootProject.swaggerSourceList.each {
        def apiName = it.getName().replace(".json", "").toLowerCase();
        def jsonFile = file(it.path);
        def parsedJson = new groovy.json.JsonSlurper().parseText(jsonFile.text);
        def clientOutputDirPerVersion = clientBaseOutputDir + "/" + it.getName().replace(".json", "");
        def specPath = it.path;

        def generateTask = task("openApiGenerate_python_" + apiName, type: GenerateTask.class) {
                generatorName = "python"
                templateDir = "$resourcesDir/templates/".toString()
                inputSpec = specPath
                outputDir = clientOutputDirPerVersion
                removeOperationIdPrefix = true
                generateApiTests = false
                generateModelTests = false
                gitUserId='criteo'
                gitRepoId='criteo-api-python-sdk'
                configOptions = [
                        apiVersion        : parsedJson.info.version,
                        packageName            : 'criteo-api-sdk',
                        invokerPackage         : 'Criteo\\SDK',
                        packageUrl             : 'https://github.com/criteo/criteo-api-python-sdk',
                        hideGenerationTimestamp: 'true'
                ]
        }

        def copyLicense = task("copyLicense_python_"+apiName, type: Copy) {
            group 'Criteo'
            description 'Copy the license into the client output folder'

            from "$projectDir/../LICENSE"
            into clientOutputDirPerVersion
            rename 'LICENSE', 'LICENSE.txt'
        };

         def copyExamples = task("copyExamples_python_" + apiName, type: Copy) {
            group 'Criteo'
            description 'Copy the Python examples into the client output folder'

            from "$resourcesDir/examples"
            into "$clientOutputDirPerVersion/examples"
        }

        def removeUnwantedFiles = task("removeUnwantedFiles_python_" + apiName, type: Delete) {
            group 'Criteo'
            description 'Remove files generated by openapi-generator that we don\'t want to push'

            delete fileTree(clientOutputDirPerVersion) {
                include '.openapi-generator-ignore', '.travis.yml', 'git_push.sh'
            }
            followSymlinks = true
        }

        taskList << generateTask.name
        taskList << copyLicense.name
        taskList << copyExamples.name
        taskList << removeUnwantedFiles.name
    }

    generateClient.dependsOn(taskList);
}

def clientPatch = hasProperty('buildNumber') ? buildNumber : '0'
