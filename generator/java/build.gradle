import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo1.maven.org/maven2" }
    }

    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:6.3.0"
    }
}

apply plugin: 'org.openapi.generator'

def clientOutputDir = "$projectDir/../../$rootProject.gereratedClientsDirName/java".toString()
def buildDir = "$projectDir/build";
def resourcesDir = "$projectDir/resources".toString()
def criteoPackage = project.properties["package.name.base"]
def basePackagePath = criteoPackage.replace(".", "/")
def generatorVersion = project.properties["generator.version"]
def technologyStack = "java8"
def nameSeparator = '.'
def language = technologyStack.replaceAll(/[^a-zA-Z]/,"").toLowerCase()

task cleanPreviousJavaBuild(type: Delete) {
    group 'Criteo'
    description 'Clean up generated client output folder'

    delete clientOutputDir
    followSymlinks = true
}

task generateClient(type: GradleBuild) {
    group 'Criteo'
    description "Generate the {language.toUpperCase()} client using openapi-generator and custom templates".toString()

    def taskList = [];

	rootProject.swaggerSourceList.each {
        def jsonFile = file(it.path);
        def parsedJson = new groovy.json.JsonSlurper().parseText(jsonFile.text);

        def parsedApiName = it.getName().replace(".json", "").toLowerCase();
        def (criteoService, apiVersionFromName) = parsedApiName.tokenize('_');
        def criteoApiVersion = apiVersionFromName.replace('-', '_');

        def clientOutputDirPerVersion = clientOutputDir + "/" + parsedApiName;
        def specPath = it.path;
        def isPreviewVersion = criteoApiVersion == 'preview';

        def versionInNamespace =  criteoApiVersion
        if (versionInNamespace.matches("[0-9].*"))
             versionInNamespace= "v" + versionInNamespace

        def namespaceBase = "${criteoPackage}.${criteoService}.${versionInNamespace}".replace('.', nameSeparator).toString(); // example : criteo.api.marketingsolutions.v2021_10

        def artifactVersion = isPreviewVersion ? '0' : criteoApiVersion.replaceAll("_",".").toString()
        artifactVersion += ".${generatorVersion}.${getFormattedDate()}".toString() // example : 2021.01.0.211110 for stable , 0.0.211110 for preview

        namespaceBase = "com." + namespaceBase; // 'com' is Java-specific => example: com.criteo.api.marketingsolutions.v2021_10

        // useful when you want templates to be part of the SDK generated
        def sdkMainDir = 'src/main/java/com/criteo/api/' + criteoService + '/' + versionInNamespace
        def sdkTestDir = 'src/test/java/com/criteo/api/' + criteoService + '/' + versionInNamespace

        def createConfig  = task("createConfig_${technologyStack}_" + parsedApiName) {
            mkdir "$buildDir"
            def file = new File("$projectDir/generatorConfiguration.yaml")
            def configFileForCriteoServiceVersion = new File("$buildDir/${criteoService}-${versionInNamespace}.yaml")
            def configContent = file.text.replace('sdkFolder', sdkMainDir).replace('testFolder', sdkTestDir)
            configFileForCriteoServiceVersion.text = configContent
        }
        createConfig.dependsOn(cleanPreviousJavaBuild.name)

        def generateTask = task("openApiGenerate_${technologyStack}_" + parsedApiName, type: GenerateTask.class) {
            generatorName = "$language".toString()
            configFile = "${buildDir}/${criteoService}-${versionInNamespace}.yaml".toString()
            templateDir = "$resourcesDir/templates/".toString()
            inputSpec = specPath
            outputDir = clientOutputDirPerVersion
            removeOperationIdPrefix = true
            generateApiTests = false
            generateModelTests = false
            configOptions = [
                    groupId                  : 'com.criteo',
                    apiPackage               : "${namespaceBase}.api".toString(), // com.criteo.api.marketingsolutions.v2021_10.api
                    modelPackage             : "${namespaceBase}.model".toString(),
                    artifactDescription      : "${language.toUpperCase()} SDK for Criteo API ${criteoService} for ${criteoApiVersion} version".toString(),
                    artifactId               : "criteo-api-${criteoService}-sdk".toString(), // criteo-api-marketingsolutions-sdk
                    artifactVersion          : "${artifactVersion}".toString(), // 2021.10.0.211110
                    artifactUrl              : "https://github.com/criteo/criteo-api-${language}-sdk".toString(),
                    dateLibrary              : technologyStack.toString(),
                    developerName            : 'Criteo',
                    developerEmail           : 'open-source@criteo.com',
                    developerOrganization    : 'Criteo',
                    developerOrganizationUrl : 'https://www.criteo.com/',
                    hideGenerationTimestamp  : 'true',
                    licenseName              : 'Apache License, version 2.0',
                    licenseUrl               : 'https://www.apache.org/licenses/LICENSE-2.0.txt',
                    scmConnection            : "scm:git:git://github.com/criteo/criteo-api-${language}-sdk.git".toString(),
                    scmDeveloperConnection   : "scm:git:ssh://github.com:criteo/criteo-api-${language}-sdk.git".toString(),
                    scmUrl                   : "https://github.com/criteo/criteo-api-${language}-sdk".toString(),
                    disallowAdditionalPropertiesIfNotPresent : 'false',
            ]
            additionalProperties = [
                        sdkTestDir        : "${sdkTestDir}",
                    ]
        }
        generateTask.dependsOn(createConfig.name)

        def copyLicense = task("copyLicense_" + technologyStack + "_" + parsedApiName, type: Copy) {
            group 'Criteo'
            description 'Copy the license into the client output folder'

            from "$projectDir/../LICENSE"
            into clientOutputDirPerVersion
            rename 'LICENSE', 'LICENSE.txt'
        };

        def removeUnwantedFiles = task("removeUnwantedFiles_" + technologyStack + "_" + parsedApiName, type: Delete) {
            group 'Criteo'
            description 'Remove files generated by openapi-generator that we don\'t want to push'

            delete fileTree(clientOutputDirPerVersion) {
                include '.openapi-generator-ignore', '.travis.yml', 'git_push.sh',\
                        'build.sbt', 'src/main/AndroidManifest.xml', 'gradle.properties'
            }
            followSymlinks = true
        }

        taskList << generateTask.name
        taskList << copyLicense.name
        taskList << removeUnwantedFiles.name
    }

    generateClient.dependsOn(taskList);
}

def getFormattedDate() {
    def date = new Date()
    def formattedDate = date.format('yyMMdd')
    return formattedDate
}

